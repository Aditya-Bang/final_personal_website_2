tailwind.config.js

backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },

fontFamily: {
        quantico: ['var(--font-quantico)'],
      },


layout.js font stuff

import { Quantico } from "next/font/google";
import "./globals.css";

const quantico = Quantico({
  subsets: ["latin"],
  display: 'swap',
  weight: '400',
});

export const metadata = {
  title: "Aditya Bang's Personal Website",
  description: "Aditya Bang's Personal Website",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${quantico.className}`}>
        {children}
      </body>
    </html>
  );
}


Contact Me from
// bg-gradient-to-r from-pink-500 to-teal-500 hover:to-primary-800


ProjectCard

variants={fadeIn("up", "spring", index * 0.5, 0.75)}


// projectcard2
// <div className='text-white text-xs font-bold bg-yellow-500 border-4 border-yellow-600 inline-block rounded-full p-2'>
//                         MongoDB
//                     </div>


// "use client";
// // convert github thing to an link thing so it can be a server component

// import React from 'react'

// const ProjectCard2 = () => {
//     return (
//         <div>
//             <div className="max-w-sm border border-gray-400 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 container">
//                 <a href="#">
//                     <img className="rounded-t-lg" src="./projectimgs/carrent.png" alt="" />
//                 </a>

//                 <a href='https://github.com/' target="_blank" className=''>
//                     <img
//                         src='./assets/github.png'
//                         alt='source code'
//                         className='w-10 h-10'
//                     />
//                 </a>

                

//                 <div className="p-5">
//                     <a href="#">
//                         <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Stud.AI</h5>
//                     </a>
//                     <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">Here are the biggest enterprise technology acquisitions of 2021 so far, in reverse chronological order.</p>
//                     <a href="#" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
//                         Read more
//                         <svg className="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
//                             <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
//                         </svg>
//                     </a>






//                     <div className="flex flex-wrap gap-2">
//                         <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-blue-900 dark:text-blue-300">Default</span>
//                         <span className="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-gray-700 dark:text-gray-300">Dark</span>
//                         <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300">Red</span>
//                         <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">Green</span>
//                         <span className="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-yellow-900 dark:text-yellow-300">Yellow</span>
//                         <span className="bg-indigo-100 text-indigo-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-indigo-900 dark:text-indigo-300">Indigo</span>
//                         <span className="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-purple-900 dark:text-purple-300">Purple</span>
//                         <span className="bg-pink-100 text-pink-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-pink-900 dark:text-pink-300">Pink</span>
//                     </div>



//                 </div>
//             </div>
//         </div>
//     )
// }

// export default ProjectCard2

// <div className="flex flex-wrap gap-2 mt-2">
//                         <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-blue-900 dark:text-blue-300">Default</span>
//                         <span className="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-gray-700 dark:text-gray-300">Dark</span>
//                         <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300">Red</span>
//                         <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">Green</span>
//                         <span className="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-yellow-900 dark:text-yellow-300">Yellow</span>
//                         <span className="bg-indigo-100 text-indigo-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-indigo-900 dark:text-indigo-300">Indigo</span>
//                         <span className="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-purple-900 dark:text-purple-300">Purple</span>
//                         <span className="bg-pink-100 text-pink-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-pink-900 dark:text-pink-300">Pink</span>
//                     </div>


// <div class="bg-gray-400 w-96 h-96 relative z-0">
//                 <p class="italic text-bold bd-red-100 font-serif">Map</p>
//                 <div class="absolute inset-0 flex justify-center items-center z-10">
//                     <p class="text-2xl font-bold">This should be on top of the map</p>
//                 </div>
//             </div>


// contact me
// <Link
//             to="/"
//             className="flex items-center mb-8 text-5xl font-semibold text-gray-900 dark:text-white"
//           >
//             <img className="w-8 h-8 mr-2" src="./logo.svg" alt="logo" />
//             Stud<span style={{ color: '#FF7D7D' }}>.AI</span>
//           </Link>


---------------------------------------------------------------------------------- INTRO LOADING ANIMATION


'use client';

import { useEffect, useRef, useState } from "react";

import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { FontLoader } from 'three/addons/loaders/FontLoader.js';
import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';
import { Flow } from 'three/examples/jsm/modifiers/CurveModifier.js';


var vertexShader = [
    "varying vec2 vUv;",
    "void main() {",
    "vUv = uv;",
    "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
    "}"
].join("\n");

var fragmentShader = [
    "uniform sampler2D baseTexture;",
    "uniform sampler2D bloomTexture;",
    "varying vec2 vUv;",
    "void main() {",
    "gl_FragColor = ( texture2D( baseTexture, vUv ) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) );",
    "}",
].join("\n");

var glowVertexShader = [
    "varying vec3 vertexNormal;",

    "void main() {",
    "vertexNormal = normalize(normalMatrix * normal);",

    "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
    "}",
].join("\n");

var glowFragmentShader = [
    "varying vec3 vertexNormal;",

    "void main() {",
    "float intensity = pow(0.3 - dot(vertexNormal, vec3(0.0, 0.0, 1.0)), 2.0) * 0.4;",
    "gl_FragColor = vec4(0.22, 0.51, 0.78, 1.0) * intensity;",
    "}"
].join("\n");

const IntroLoadingAnimation = (props) => {
    const mountRef = useRef(null);

    useEffect(() => {
        const earthModel = props.earthModel;
        const textModel = props.textModel;

        const BLOOM_SCENE = 1;

        const bloomLayer = new THREE.Layers();
        bloomLayer.set(BLOOM_SCENE);

        const sunParams = {
            threshold: 0.1,
            strength: 1.124,
            radius: 0.1,
            exposure: 1.059
        };

        const darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' });
        const materials = {};

        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        //renderer.toneMapping = THREE.ReinhardToneMapping;
        mountRef.current.appendChild(renderer.domElement);

        const scene = new THREE.Scene();

        // camera movement
        let camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.01, 10000);
        camera.position.set(0, 50, 500);
        camera.lookAt(0, 0, 0);
        let splineCamera, cameraHelper, cameraEye;
        splineCamera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.01, 1000);
        const animationSpeed = 15;
        const direction = new THREE.Vector3();
        const binormal = new THREE.Vector3();
        const normal = new THREE.Vector3();
        const position = new THREE.Vector3();
        const lookAt = new THREE.Vector3();

        let parent, tubeGeometry, mesh;

        const params = {
            spline: 'PipeSpline',
            scale: 5,
            extrusionSegments: 100,
            radiusSegments: 3,
            closed: true,
            animationView: false,
            lookAhead: false,
            cameraHelper: false,
        };

        const tubeMaterial = new THREE.MeshBasicMaterial({ transparent: true, color: 0xfff000 });

        const wireframeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, opacity: 0.3, wireframe: true, transparent: true });

        function addTube() {

            if (mesh !== undefined) {

                parent.remove(mesh);
                mesh.geometry.dispose();

            }

            const extrudePath = pipeSpline;

            tubeGeometry = new THREE.TubeGeometry(extrudePath, params.extrusionSegments, 2, params.radiusSegments, params.closed);

            addGeometry(tubeGeometry);

            setScale();

        }

        function setScale() {

            mesh.scale.set(params.scale, params.scale, params.scale);

        }


        function addGeometry(geo) {

            // 3D shape

            mesh = new THREE.Mesh(geo, tubeMaterial);
            const wireframe = new THREE.Mesh(geo, wireframeMaterial);
            //mesh.add(wireframe);
            mesh.material.opacity = 0;
            mesh.layers.set(BLOOM_SCENE);

            parent.add(mesh);

        }

        function animateCamera() {

            cameraHelper.visible = params.cameraHelper;
            cameraEye.visible = params.cameraHelper;

        }

        const pipeSpline = new THREE.CatmullRomCurve3([
            new THREE.Vector3(22, -5, -5),
            new THREE.Vector3(22, -3, 10),
            new THREE.Vector3(20, -1, 16),
            new THREE.Vector3(17, 1, 22),
            new THREE.Vector3(13, 3, 30),
            new THREE.Vector3(8, 5, 38),
            new THREE.Vector3(2, 7, 46),
            new THREE.Vector3(0, 9, 50),
            new THREE.Vector3(0, 9, 58),
            new THREE.Vector3(0, 9, 75),
            new THREE.Vector3(0, 9, 81),
        ]);



        // const controls = new OrbitControls(camera, renderer.domElement);
        // controls.maxPolarAngle = Math.PI * 0.5;
        // controls.minDistance = 1;
        // controls.maxDistance = 100;
        // controls.addEventListener('change', render);

        const renderScene = new RenderPass(scene, splineCamera);

        const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);
        bloomPass.threshold = sunParams.threshold;
        bloomPass.strength = sunParams.strength;
        bloomPass.radius = sunParams.radius;

        const bloomComposer = new EffectComposer(renderer);
        bloomComposer.renderToScreen = false;
        bloomComposer.addPass(renderScene);
        bloomComposer.addPass(bloomPass);

        const mixPass = new ShaderPass(
            new THREE.ShaderMaterial({
                uniforms: {
                    baseTexture: { value: null },
                    bloomTexture: { value: bloomComposer.renderTarget2.texture }
                },
                vertexShader: vertexShader,
                fragmentShader: fragmentShader,
                defines: {}
            }), 'baseTexture'
        );
        mixPass.needsSwap = true;

        const outputPass = new OutputPass();

        const finalComposer = new EffectComposer(renderer);
        finalComposer.addPass(renderScene);
        finalComposer.addPass(mixPass);
        finalComposer.addPass(outputPass);

        // const raycaster = new THREE.Raycaster();
        // const mouse = new THREE.Vector2();
        // window.addEventListener('pointerdown', onPointerDown);

        
        const ETscale = 100;
        const radius = ETscale * 22 / 30;
        const radiusRootTwo = radius * Math.SQRT2;
        const textHeightOffset = -ETscale / 10;
        const curveHandles = [];
        let flow;
        const initialPoints = [
            { x: radius, y: textHeightOffset, z: radius },
            { x: radiusRootTwo, y: textHeightOffset, z: 0 },
            { x: radius, y: textHeightOffset, z: -radius },
            { x: 0, y: textHeightOffset, z: -radiusRootTwo },
            { x: -radius, y: textHeightOffset, z: -radius },
            { x: -radiusRootTwo, y: textHeightOffset, z: 0 },
            { x: -radius, y: textHeightOffset, z: radius },
            { x: 0, y: textHeightOffset, z: radiusRootTwo },


        ];

        // function loadText2() {

        //     textLoader = new GLTFLoader();

        //     // Optional: Provide a DRACOLoader instance to decode compressed mesh data
        //     // const dracoLoader = new DRACOLoader();
        //     // dracoLoader.setDecoderPath('/examples/jsm/libs/draco/');
        //     // textLoader.setDRACOLoader(dracoLoader);
        //     //public\name\curvedname2.glb
        //     // return new Promise((resolve, reject) => {
                
        //     // }) // try this

        //     textLoader.load(
        //         './name/curvedname.glb',

        //         function (gltf) {
        //             gltf.scene.scale.set(40, 40, 40);
        //             //console.log(gltf.scene)
        //             textModel = gltf.scene;

        //             scene.add(textModel);

        //             textModel.rotation.y = Math.PI
        //             //earthModel.position.y = -30;
        //             console.log("Finished");
        //             //setIsLoading(false);
        //             return gltf.scene;

        //             // gltf.animations; // Array<THREE.AnimationClip>
        //             // gltf.scene; // THREE.Group
        //             // gltf.scenes; // Array<THREE.Group>
        //             // gltf.cameras; // Array<THREE.Camera>
        //             // gltf.asset; // Object
        //         },

        //         function (xhr) {
        //             console.log((xhr.loaded / xhr.total * 100) + '% loaded');
        //         },

        //         function (error) {
        //             console.log('An error happened', error);
        //         }
        //     );
        // }

        function rotateText2(elapsedT) {
            if (textModel) {
                if (textModel.rotation.y > 0) {
                    textModel.rotation.y -= elapsedT / 5;
                } else {
                    textModel.rotation.y = 0;
                }
            } 
        }



        // function loadText() {
        //     const boxGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);
        //     const boxMaterial = new THREE.MeshBasicMaterial();

        //     for (const handlePos of initialPoints) {

        //         const handle = new THREE.Mesh(boxGeometry, boxMaterial);
        //         handle.position.copy(handlePos);
        //         curveHandles.push(handle);

        //     }

        //     const curve = new THREE.CatmullRomCurve3(
        //         curveHandles.map((handle) => handle.position)
        //     );
        //     curve.curveType = 'centripetal';
        //     curve.closed = true;

        //     const textloader = new FontLoader();
        //     textloader.load('../helvetiker_bold.typeface.json', function (font) {

        //         const geometry = new TextGeometry('Aditya Bang', {
        //             font: font,
        //             size: ETscale / 3,
        //             height: 0.05,
        //             curveSegments: 12,
        //             bevelEnabled: true,
        //             bevelThickness: ETscale / 30,
        //             bevelSize: ETscale / 100,
        //             bevelOffset: 0,
        //             bevelSegments: 5,
        //         });

        //         geometry.rotateX(Math.PI);

        //         let material = new THREE.MeshPhysicalMaterial({
        //             clearcoat: 1.0,
        //             clearcoatRoughness: 0.1,
        //             metalness: 0.9,
        //             roughness: 0.5,
        //             color: 0xFFD700,

        //             normalScale: new THREE.Vector2(0.15, 0.15)
        //         });

        //         const objectToCurve = new THREE.Mesh(geometry, material);

        //         flow = new Flow(objectToCurve);
        //         flow.updateCurve(0, curve);
        //         scene.add(flow.object3D);
        //     });
        // }

        // function rotateText(elapsedT) {
        //     if (flow) flow.moveAlongCurve(-elapsedT * 0.08);
        // }

        // // earthLoader = new DRACOLoader();
        // // earthLoader.preload();

        // function loadEarth() {

        //     earthLoader = new GLTFLoader();

        //     // Optional: Provide a DRACOLoader instance to decode compressed mesh data
        //     // const dracoLoader = new DRACOLoader();
        //     // dracoLoader.setDecoderPath('/examples/jsm/libs/draco/');
        //     // loader.setDRACOLoader(dracoLoader);

            
        //     earthLoader.load(
        //         './planet/scene.gltf',

        //         function (gltf) {
        //             gltf.scene.scale.set(ETscale, ETscale, ETscale);
        //             earthModel = gltf.scene;
        //             scene.add(earthModel);
        //             gltf.animations;
        //             gltf.scene;
        //             gltf.scenes;
        //             gltf.cameras;
        //             gltf.asset;

        //             const glow = new THREE.Mesh(
        //                 new THREE.SphereGeometry(70, 50, 50),
        //                 new THREE.ShaderMaterial({
        //                     vertexShader: glowVertexShader,
        //                     fragmentShader: glowFragmentShader,
        //                     blending: THREE.AdditiveBlending,
        //                     side: THREE.BackSide
        //                 })
        //             )
        //             glow.scale.set(1.2, 1.2, 1.2);
        //             glow.opacity = 1;
        //             glow.layers.enable(BLOOM_SCENE);
        //             //scene.add(glow);
        //         },

        //         function (xhr) {
        //             console.log((xhr.loaded / xhr.total * 100) + '% loaded');
        //         },

        //         function (error) {
        //             console.log('An error happened');
        //         }
        //     );

        //     return 0;
        // }

        function rotateEarth(elapsedT) {
            if (earthModel) earthModel.rotation.y += elapsedT / 5;
        }

        setupScene();

        function onPointerDown(event) {

            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;

            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObjects(scene.children, false);
            if (intersects.length > 0) {

                const object = intersects[0].object;
                object.layers.toggle(BLOOM_SCENE);
                render();

            }

        }

        window.onresize = function () {

            const width = window.innerWidth;
            const height = window.innerHeight;

            camera.aspect = width / height;
            camera.updateProjectionMatrix();

            splineCamera.aspect = window.innerWidth / window.innerHeight;
            splineCamera.updateProjectionMatrix();

            renderer.setSize(width, height);

            bloomComposer.setSize(width, height);
            finalComposer.setSize(width, height);

            render();

        };



        function setupScene() {

            //scene.traverse(disposeMaterial);
            //scene.children.length = 0;

            // light
            const ambientLight = new THREE.AmbientLight(0xffffff, 0);
            scene.add(ambientLight);
            //scene.add(new THREE.AmbientLight(0xffffff));

            const light1 = new THREE.DirectionalLight(0xffffff, 10);
            light1.position.set(-120, 0, 100);
            scene.add(light1);

            // camera
            parent = new THREE.Object3D();
            scene.add(parent);

            //splineCamera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.01, 1000);
            parent.add(splineCamera);

            cameraHelper = new THREE.CameraHelper(splineCamera);
            scene.add(cameraHelper);

            cameraEye = new THREE.Mesh(new THREE.SphereGeometry(5), new THREE.MeshBasicMaterial({ color: 0xdddddd }));
            parent.add(cameraEye);

            cameraHelper.visible = params.cameraHelper;
            cameraEye.visible = params.cameraHelper;

            // sun
            const geometry = new THREE.IcosahedronGeometry(20, 15);
            const material = new THREE.MeshBasicMaterial({ color: 0xFDB813 });
            const sphere = new THREE.Mesh(geometry, material);
            scene.add(sphere);
            sphere.layers.enable(BLOOM_SCENE)
            sphere.position.x = -60;
            sphere.position.z = -300;
            sphere.position.y = 55;

            // var yes = loadText2();
            // console.log(yes);
            addTube();
            // loadEarth();
            textModel.rotation.y = Math.PI * 1.10;
            scene.add(earthModel);
            scene.add(textModel);



        }

        function disposeMaterial(obj) {

            if (obj.material) {

                obj.material.dispose();

            }

        }

        function render() {

            //if (textModel) {

            

            scene.traverse(darkenNonBloomed);
            bloomComposer.render();
            scene.traverse(restoreMaterial);

            // render the entire scene, then render bloom scene on top
            finalComposer.render();
            //}

        }

        function darkenNonBloomed(obj) {

            if (obj.isMesh && bloomLayer.test(obj.layers) === false) {

                materials[obj.uuid] = obj.material;
                obj.material = darkMaterial;

            }

        }

        function restoreMaterial(obj) {

            if (materials[obj.uuid]) {

                obj.material = materials[obj.uuid];
                delete materials[obj.uuid];

            }

        }

        let time, previousTime = Date.now(), elapsedTime;
        let pickNext = 1;
        var t = 0;
        //splineCamera.rotateOnAxis.z += Math.Pi;
        var cameraRotation = -Math.PI / 4;

        var animate = function () {
            requestAnimationFrame(animate);

            //if (earthModel) earthModel.layers.enable(BLOOM_SCENE);

            // camera.lookAt(0,0,0);
            // camera.rotateZ(cameraRotation); // use this to rotate spline camera
            // cameraRotation += 0.001;

            // todos - camera rotation
            // star background with nebula - look at starbg, starshape, star color randomize, and fog
            // add html/css part of earth video - create replay animation button
            // 3d buttons to other paths

            // animate camera
            time = Date.now();
            elapsedTime = time - previousTime;
            previousTime = time;

            if (pickNext != 0) {
                // console.log(elapsedTime/1000);
                const looptime = animationSpeed * 1000;
                //t = (time % looptime) / looptime;
                //console.log(t);
                t += elapsedTime / looptime;
                t -= Math.floor(t);
                //t = (t % looptime) / looptime;
                // console.log(t); // gives an error where if a person does not view the screen the time keeps increasing but the
                // only iterate time if person is on the tab.


                tubeGeometry.parameters.path.getPointAt(t, position);
                position.multiplyScalar(params.scale);

                // interpolation

                //if (splineCamera.position.z < 400) console.log("Yes");

                const segments = tubeGeometry.tangents.length;
                const pickt = t * segments;
                const pick = Math.floor(pickt);
                pickNext = (pick + 1) % segments;

                binormal.subVectors(tubeGeometry.binormals[pickNext], tubeGeometry.binormals[pick]);
                binormal.multiplyScalar(pickt - pick).add(tubeGeometry.binormals[pick]);

                tubeGeometry.parameters.path.getTangentAt(t, direction);
                const offset = 15;

                normal.copy(binormal).cross(direction);

                // we move on a offset on its binormal

                position.add(normal.clone().multiplyScalar(offset));

                splineCamera.position.copy(position);
                cameraEye.position.copy(position);

                // using arclength for stablization in look ahead

                tubeGeometry.parameters.path.getPointAt((t + 30 / tubeGeometry.parameters.path.getLength()) % 1, lookAt);
                lookAt.multiplyScalar(params.scale);

                // camera orientation 2 - up orientation via normal

                if (!params.lookAhead) lookAt.copy(position).add(direction);
                splineCamera.matrix.lookAt(splineCamera.position, lookAt, normal);
                splineCamera.matrix.lookAt(0, 0, -50);
                splineCamera.quaternion.setFromRotationMatrix(splineCamera.matrix);
                splineCamera.lookAt(0, 0, -100);
                splineCamera.rotateZ(cameraRotation);
                if (cameraRotation < 0) cameraRotation += elapsedTime / 10000;
                else cameraRotation = 0; // camera rotation in quadratic - change spline to see further back

                cameraHelper.update();


            } else {
                t = 0;
                cameraRotation = -Math.PI / 4;
            }

            rotateText2(elapsedTime / 1000);
            rotateEarth(elapsedTime / 1000);

            render();
        }

        animate();

        
        return () => {
            if (mountRef.current != null) {
                mountRef.current.removeChild(renderer.domElement);
            }
            
        }
        
    }, [])

    

    return (
        <div className="absolute">
        

            <div ref={mountRef} />
            
        </div>

    )
}

export default IntroLoadingAnimation;

----------------------------------------------------------------------------- INTRO HEADER


// import "./stylestest/test2.css";
// <a className="uppercase" href="#">Hover this link</a>

// import { motion } from "framer-motion";
// <motion.div
//         whileHover={{ scale: 1.2 }}
//         whileTap={{ scale: 0.8 }}
//       >
//         Hover framer
//       </motion.div>

// import "./stylestest/test1.css"
// <Link href="/contact">
//   <button className={`btn-one h-20 leading-12 w-96 text-6xl ${quantico.className}`}>
//     <span className="uppercase text-red-700">Contact</span>
//   </button>
// </Link>
// <span className="absolute bottom-0 left-0 w-full h-full bg-white bg-opacity-10"></span> // makes whiter background on button

// import "./stylestest/test3.scss"

// <div className="my_element">
//         About
//       </div>
//       <div className="my_element">
//         Contact
//       </div>
//       <div className="my_element">
//         Qualifications
//       </div>
//       <div className="my_element">
//         Projects
//       </div>
---------------------------------------------------------------- OLD projectcard2
// <div className=''>
//             <div className="max-w-64 z-10 border-gray-800 rounded-lg shadow shadow-gray-800 dark:bg-[#1f1325] dark:border-gray-700 relative">
//                 <img className="rounded-t-lg" src={props.image} alt={props.alt} />

//                 <a href={props.source_code_link} target="_blank" className='absolute rounded-full bg-black border-2 border-black top-0 right-0 m-1 h-12 w-12'>
//                     <img
//                         src='./assets/github2.png'
//                         alt='source code'
//                         className='object-contain'
//                     />
//                 </a>

//                 {props.demo ?
//                     <a href={props.demo} target="_blank" className="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 absolute top-0 left-0 m-2 mt-3">
//                         Demo
//                         <svg className="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
//                             <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
//                         </svg>
//                     </a> : <div />}



//                 <div className="p-5">
//                     <div>
//                         <h5 className="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">{props.name}</h5>
//                     </div>

//                     <p className="mb-3 font-normal text-gray-700 dark:text-gray-400">{props.description}</p>


//                     {/*color options are blue, gray, red, green, yellow, purple, indigo, pink*/}
//                     <div className="flex flex-wrap gap-2 mt-2">
//                         {props.tags.map((tag, tagIndex) => {
//                             let style;
//                             if (tag.color == "blue") {
//                                 style = "bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-blue-900 dark:text-blue-300";
//                             } else if (tag.color == "gray") {
//                                 style = "bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-gray-900 dark:text-gray-300";
//                             } else if (tag.color == "red") {
//                                 style = "bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-red-900 dark:text-red-300";
//                             } else if (tag.color == "green") {
//                                 style = "bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300";
//                             } else if (tag.color == "yellow") {
//                                 style = "bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-yellow-900 dark:text-yellow-300";
//                             } else if (tag.color == "purple") {
//                                 style = "bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-purple-900 dark:text-purple-300";
//                             } else if (tag.color == "indigo") {
//                                 style = "bg-indigo-100 text-indigo-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-indigo-900 dark:text-indigo-300";
//                             } else {
//                                 style = "bg-pink-100 text-pink-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-pink-900 dark:text-pink-300";
//                             }
//                             return (
//                                 <span key={`project-${props.index}-tag-${tagIndex}`} className={style}>{tag.name}</span>
//                             )
//                         })}



//                     </div>
//                 </div>
//             </div>
//         </div>

------------------------------------------------------------ About Me page
<p className='text-xl'>Hello and welcome to my personal website. My name is Aditya Bang and I am currently a second year Co-op computer science student at the University of Waterloo.</p>


          <p className='text-xl'>
            Full stack development, please replay the animation (have link here), done a bunch of projects, learning the math behind AI, reading papers, etc. graph theory through competitive programming and pure math which im taking in advanced waterloo math courses
            I am passionate about making projects and have made some involving AI, graph theory, and more.
            Lived in canada for about 10 years, and before that spent a 4 years living in florida and minnisota, and the rest in India.
          </p>
          <p className='text-xl'>Outside the classroom, I am interested in swimming (swimming emoji here) and watching basketball. (basketball emoji here)</p>
          <p className='text-xl'>
            Seeking internships for Fall 2024. Feel free to contact me. (Link here) and thanks for visiting.
          </p>


Hello and welcome to my personal website. I'm Aditya Bang, a second-year Co-op student majoring in computer science at the University of Waterloo.

My interests revolve around programming, mathematics, and physics. With a focus on full-stack development, I've delved into various projects, some of which involve AI. My curiosity extends to understanding the mathematical principles underpinning AI through reading research papers. Additionally, I'm keen on competitive programming, particularly in graph theory, and exploring pure mathematics in my classes at UWaterloo.

Beyond academics, I enjoy swimming and got my Bronze Cross Assistant lifeguard certification in 2019. I also like watching basketball.

Currently, I'm seeking internships for the Fall of 2024. Please don't hesitate to reach out. Thank you for taking the time to explore my personal website.


Hello and welcome to my personal website. My name is Aditya Bang and I am currently a second year Co-op computer science student at the University of Waterloo.

I am passionate about anything remotely related to programming, math, and physics. I mainly have experience in full-stack development and am passionate about making projects and have made some involving AI. I am interested in learning the math behind AI by reading research papers, I am interested in competitive programming (mainly graph theory), and pure mathematics.

Outside of work, I enjoy swimming as I got my Bronze Cross Assistant lifeguard certification in 2019. I also enjoy watching basketball.

Currently, I am seeking internships for Fall 2024. Feel free to contact me and thank you for visiting my personal website.

Full stack development, please replay the animation (have link here), done a bunch of projects, learning the math behind AI, reading papers, etc. graph theory through competitive programming and pure math which im taking in advanced waterloo math courses I am passionate about making projects and have made some involving AI, graph theory, and more. Lived in canada for about 10 years, and before that spent a 4 years living in florida and minnisota, and the rest in India.

Outside the classroom, I am interested in swimming (swimming emoji here) and watching basketball. (basketball emoji here)

Seeking internships for Fall 2024. Feel free to contact me. (Link here) and thanks for visiting.
